name: 'RepoDynamics PyTests'
description: 'Test Python packages'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue


inputs:

  repository:
    description: Full name of the repository, i.e., 'owner-username/repo-name'.
    required: false
    default: ${{ github.repository }}

  ref:
    description: Git reference to check out in the repository.
    required: false
    default: ${{ github.ref }}

  path-setup-testsuite:
    description: >-
      Path (relative to the repository root) to the directory containing 
      the test-suite's setup file (e.g., pyproject.toml).
    required: false
    default: ./tests

  path-setup-package:
    description: >-
      Path (relative to the repository root) to the directory containing 
      the package's setup file (e.g., pyproject.toml).
      This is only used when `package-source` is set to 'GitHub'.
    required: false
    default: .

  testsuite-import-name:
    description: Name of the testsuite package to import.
    required: true

  package-source:
    description: Source to install the package; either 'GitHub', 'TestPyPI', or 'PyPI'.
    required: false
    default: local

  package-name:
    description: Name of the package to install, when `package-source` is 'PyPI' or 'TestPyPI'.
    required: false
    default: ""

  package-version:
    description: |
      Version of the package to download and install, when `package-source` is 'PyPI' or 'TestPyPI'.
      If not specified, the latest version will be installed.
    required: false
    default: ""

  python-version:
    description: Python version to use.
    required: false
    default: '3.x'

  os:
    description: Current operating system of the job.
    required: false
    default: ubuntu-latest

  path-requirements-package:
    description: |
      Path (relative to the repository root) to the requirements.txt file for the package.
      This is only used when `package-source` is 'TestPyPI', in which case the package will
      be installed without its dependencies from TestPyPI, and the dependencies will be
      installed from the requirements.txt file to avoid security vulnerabilities and other issues.
    required: false
    default: "requirements.txt"

  path-report-pytest:
    description: Path to the pytest reports directory relative to the repository root.
    required: false
    default: ""

  path-report-coverage:
    description: Path to the coverage reports directory relative to the repository root.
    required: false
    default: ""

  path-cache-pytest:
    description: Path to the pytest cache directory relative to the repository root.
    required: false
    default: ""

  path-cache-coverage:
    description: Path to the coverage cache directory relative to the repository root.
    required: false
    default: ""

  retry-sleep-seconds-total:
    description: Maximum number of retries for downloading the package from PyPI or TestPyPI.
    required: false
    default: '900'

  retry-sleep-seconds:
    description: Delay between retries in seconds.
    required: false
    default: '30'

  test:
    description: Whether to run the test workflow on package.
    required: true
    default: ZZZ


runs:

  using: "composite"
  steps:

    - name: 'Initialization'
      shell: bash
      run: |
        # Initialization
        echo "${{ inputs.test }}"
        printf "\n\n$(cat ${{github.action_path}}/logo.txt)\n"
        python "${{ github.action_path }}/heading.py" 1 "Initialization"
        python "${{ github.action_path }}/heading.py" 2 "Repository Checkout"

    - name: 'Repository Checkout'
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        fetch-tags: true
        path: repo
#        fetch-depth: 0

    - name: 'Python Setup'
      shell: bash
      run: |
        # Python Setup
        python "${{ github.action_path }}/heading.py" 2 "Python Setup"
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: 'Environment Setup'
      env:
        RD_PYTESTER_ES__PATH_REPO: repo
        RD_PYTESTER_ES__PATH_SETUP_TESTSUITE: ${{ inputs.path-setup-testsuite }}
        RD_PYTESTER_ES__PATH_SETUP_PACKAGE: ${{ inputs.path-setup-package }}
        RD_PYTESTER_ES__PACKAGE_SOURCE: ${{ inputs.package-source }}
        RD_PYTESTER_ES__PACKAGE_NAME: ${{ inputs.package-name }}
        RD_PYTESTER_ES__PACKAGE_VERSION: ${{ inputs.package-version }}
        RD_PYTESTER_ES__PATH_REQUIREMENTS_PACKAGE: ${{ inputs.path-requirements-package }}
        RD_PYTESTER_ES__RETRY_SLEEP_SECONDS: ${{ inputs.retry-sleep-seconds }}
        RD_PYTESTER_ES__RETRY_SLEEP_SECONDS_TOTAL: ${{ inputs.retry-sleep-seconds-total }}
      shell: bash
      run: |
        # Environment Setup
        python "${{ github.action_path }}/heading.py" 2 "Environment Setup"
        echo "::group::Install Action Requirements"
        python -m pip install -r "${{ github.action_path }}/requirements.txt"
        echo "::endgroup::"
        python "${{ github.action_path }}/env_setup.py"

#    - name: 'Run dependency tests'
#      shell: bash
#      run: pipreqs ./src --debug --print

    - name: 'PyTest Cache'
      shell: bash
      run: |
        # PyTest Cache
        am-print-h2 "PyTest Cache"
    - uses: actions/cache@v3
      with:
        path: ${{ inputs.path-cache-pytest }}
        key: >-
          pytest
          -${{ inputs.os }}
          -${{ inputs.python-version }}
#          -${{ fromJSON(inputs.config).checkout.ref_before }}

    - name: 'Coverage Cache'
      shell: bash
      run: |
        # Coverage Cache
        am-print-h2 "Coverage Cache"
    - uses: actions/cache@v3
      with:
        path: ${{ inputs.path-cache-coverage }}
        key: >-
          coverage
          -${{ inputs.os }}
          -${{ inputs.python-version }}
#          -${{ fromJSON(inputs.config).checkout.ref_before }}

    - name: 'Test-Suite Run'
      shell: bash
      run: |
        # Test-Suite Run
        am-print-h1 "Test-Suite Run"
        python -m ${{ inputs.testsuite-import-name }}

    - name: 'Upload reports'
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Test-Suite Reports
        path: ${{ inputs.path-report-pytest }}

    - name: 'Upload coverage reports to codecov'
      if: ${{ !cancelled() && inputs.package-source == 'GitHub' }}
      # https://github.com/marketplace/actions/codecov
      # https://github.com/codecov/codecov-action
      env:
        OS: ${{ inputs.os }}
        PYTHON: ${{ inputs.python-version }}
      uses: codecov/codecov-action@v3
      with:
        directory: ${{ inputs.path-report-coverage }}
        fail_ci_if_error: false
        verbose: true
        env_vars: OS,PYTHON
