name: 'RepoDynamics PyTests'
description: 'Test Python packages'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue


inputs:

  checkout-ref:
    description: |
      Reference to checkout, i.e. the `ref` input of `actions/checkout`.
    default: ""
    required: false

  python-version:
    description: Python version to use.
    default: '3.x'
    required: false

  package-source:
    description: |
      Source to install the package; options: 'local', 'testpypi', 'pypi'.
    default: local
    required: false

  package-name:
    description: |
      Name of the package to install, when `install_source` is 'testpypi' or 'pypi'.
    default: ""
    required: false

  package-version:
    description: |
      Version of the package to install, when `install_source` is 'testpypi' or 'pypi'.
    default: ""
    required: false


runs:
  using: "composite"
  steps:

    - name: 'Initialize'
      shell: bash
      run: |
        # Initialize
        printf "\n\n$(cat ${{github.action_path}}/logo.txt)\n\n\n"
        echo -e "\033[1;30;48;2;0;162;255m 1. Initialize  "

    - name: 'Set up Python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{inputs.python-version}}

    - if: ${{ inputs.package-source == 'local' }}
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.checkout-ref }}
        fetch-depth: 0
    - if: ${{ inputs.package-source != 'local' }}
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.checkout-ref }}
        sparse-checkout: |
          tests
          requirements.txt
          pyproject.toml
        sparse-checkout-cone-mode: false

    - name: 'Install package'
      shell: bash
      run: |
        echo "::group::Update pip"
        python -m pip install --upgrade pip
        echo "::endgroup::"
        
        if [ "${{inputs.package-source}}" = "local" ]; then
            python -m pip install .
        elif [ "${{ inputs.package-source }}" = "testpypi" ]; then
            python -m pip install -r requirements.txt
            python -m pip install \
              ${{ inputs.package-name }}==${{ inputs.package-version }} \
              --no-deps \
              --index-url https://test.pypi.org/simple/
        elif [ "${{inputs.package-source}}" = "pypi" ]; then
            python -m pip install \
              ${{ inputs.package-name }}==${{ inputs.package-version }}
        else
            echo "Invalid package-source: '${{ inputs.package-source }}'."
            exit 1
        fi

    - name: 'Install test dependencies'
      shell: bash
      run: |
        python -m pip install --upgrade pytest pytest-cov pipreqs
        python -m pip install -r tests/requirements.txt

    - name: 'Display info'
      shell: bash
      run: |
        echo "::group::Python version"
        python -c "import sys; print(sys.version)"
        echo "::endgroup::"
        echo "::group::pip list"
        python -m pip list
        echo "::endgroup::"
        echo "::group::OS and hardware info"
        uname -a
        echo "::endgroup::"
        echo "::group::Disk space usage"
        df -h
        echo "::endgroup::"
        echo "::group::Available system resources"
        ulimit -a
        echo "::endgroup::"
        echo "::group::Root directory"
        ls -a
        echo "::endgroup::"
        echo "::group::File tree"
        find .
        echo "::endgroup::"
    
    - name: 'Test import package'
      shell: python
      run: |
        import ${{ needs.metadata.outputs.package-name }} as pkg
        print(pkg.__version__)

#    - name: 'Run dependency tests'
#      shell: bash
#      run: pipreqs ./src --debug --print

    - name: 'Run unit tests'
      shell: bash
      run: >-
        pytest -c pyproject.toml
          --cov=${{needs.metadata.outputs.package-name}}
          --cov-report=xml

    - name: 'Upload coverage reports to codecov'
      if: always() && ${{inputs.install-source}} == 'local'
      # https://github.com/marketplace/actions/codecov
      # https://github.com/codecov/codecov-action
      uses: codecov/codecov-action@v3.1.4
      with:
        fail_ci_if_error: false
        verbose: true
        env_vars: OS,PYTHON

