name: 'RepoDynamics PyTests'
description: 'Test Python packages'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue


inputs:

  config:
    required: true
    description: CI configuration as a JSON string.

  metadata:
    required: true
    description: CI metadata as a JSON string.

  package-source:
    description: |
      Source to install the package; options: 'GitHub', 'TestPyPI', 'PyPI'.
    default: local
    required: false

  python-version:
    description: Python version to use.
    default: '3.x'
    required: false

  os:
    description: Current operating system of the job.
    default: ubuntu-latest
    required: false

  max-retries:
    description: |
      Maximum number of retries.
    default: '15'
    required: false

  retry-delay:
    description: |
      Delay between retries in seconds.
    default: '60'
    required: false


runs:
  using: "composite"
  steps:

    - name: 'Initialize'
      shell: bash
      run: |
        # Initialize
        printf "\n\n$(cat ${{github.action_path}}/logo.txt)\n\n\n"
        echo -e "\033[1;30;48;2;0;162;255m Initialize "

#    - if: ${{ inputs.package-source == 'GitHub' }}
    - uses: actions/checkout@v3
      with:
        repository: ${{ fromJSON(inputs.config).checkout.repository }}
        ref: ${{ fromJSON(inputs.config).checkout.ref }}
        fetch-depth: 0
#    - if: ${{ inputs.package-source != 'GitHub' }}
#      uses: actions/checkout@v3
#      with:
#        repository: ${{ inputs.repository }}
#        ref: ${{ inputs.ref }}
#        sparse-checkout-cone-mode: false
#        sparse-checkout: |
#          ${{ inputs.path-local }}
#          ${{ inputs.path-tests }}
#          ${{ inputs.path-config }}
#          requirements.txt

    - name: 'Set up Python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: 'Install package'
      shell: bash
      run: |
        # Setup Environment
        source $(echo "${{ github.action_path }}" | sed 's/\\/\//g')/retry.sh
        
        echo "::group::Update pip"
        python -m pip install --upgrade pip
        echo "::endgroup::"
        
        echo "::group::Install Package"
        if [ "${{inputs.package-source}}" = "GitHub" ]; then
            python -m pip install .
        
        elif [ "${{ inputs.package-source }}" = "TestPyPI" ]; then
            python -m pip install -r requirements.txt

            COMMAND="python -m pip install \
              ${{ fromJson(inputs.metadata).package.name }}==${{ fromJSON(inputs.config).package.version }} \
              --no-deps \
              --index-url https://test.pypi.org/simple/"
            retry_command "$COMMAND" "${{ inputs.max-retries }}" "${{ inputs.retry-delay }}"
        
        elif [ "${{inputs.package-source}}" = "PyPI" ]; then
            if [ -z "${{ fromJSON(inputs.config).package.version }}" ]; then
                COMMAND="python -m pip install ${{ fromJson(inputs.metadata).package.name }}"
            else
                COMMAND="python -m pip install ${{ fromJson(inputs.metadata).package.name }}==${{ fromJSON(inputs.config).package.version }}"
            fi
            retry_command "$COMMAND" "${{ inputs.max-retries }}" "${{ inputs.retry-delay }}"

        else
            echo "Invalid package-source: '${{ inputs.package-source }}'."
            exit 1
        fi
        echo "::endgroup::"
        
        echo "::group::Install Test-Suite"
        python -m pip install ./${{ fromJson(inputs.metadata).path.dir.tests }}
        echo "::endgroup::"

    - name: 'Display info'
      shell: bash
      run: |
        echo "::group::Python version"
        python -c "import sys; print(sys.version)"
        echo "::endgroup::"
        echo "::group::pip list"
        python -m pip list
        echo "::endgroup::"
        echo "::group::OS and hardware info"
        uname -a
        echo "::endgroup::"
        echo "::group::Disk space usage"
        df -h
        echo "::endgroup::"
        echo "::group::Available system resources"
        ulimit -a
        echo "::endgroup::"
        echo "::group::Root directory"
        ls -a
        echo "::endgroup::"
        echo "::group::File tree"
        find .
        echo "::endgroup::"

#    - name: 'Run dependency tests'
#      shell: bash
#      run: pipreqs ./src --debug --print

    - name: 'Load PyTest Cache'
      uses: actions/cache@v3
      with:
        path: ${{ fromJson(inputs.metadata).path.dir.local.cache.pytest }}
        key: >-
          pytest
          -${{ inputs.os }}
          -${{ inputs.python-version }}
          -${{ fromJSON(inputs.config).checkout.ref_before }}

    - name: 'Load Coverage Cache'
      uses: actions/cache@v3
      with:
        path: ${{ fromJson(inputs.metadata).path.dir.local.cache.coverage }}
        key: >-
          coverage
          -${{ inputs.os }}
          -${{ inputs.python-version }}
          -${{ fromJSON(inputs.config).checkout.ref_before }}

    - name: 'Run Test-Suite'
      shell: bash
      run: python -m ${{ fromJson(inputs.metadata).package.name }}_tests

    - name: 'Upload reports'
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Test-Suite Reports
        path: ${{ fromJson(inputs.metadata).path.dir.local.report }}

    - name: 'Upload coverage reports to codecov'
      if: ${{ !cancelled() && inputs.package-source == 'GitHub' }}
      # https://github.com/marketplace/actions/codecov
      # https://github.com/codecov/codecov-action
      uses: codecov/codecov-action@v3
      with:
        directory: ${{ fromJson(inputs.metadata).path.dir.local.report.coverage }}
        fail_ci_if_error: false
        verbose: true
        env_vars: OS,PYTHON

