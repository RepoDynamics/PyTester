name: 'RepoDynamics PyTests'
description: 'Test Python packages'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue


inputs:

  repository:
    description: Repository to checkout, i.e. the `repository` input of `actions/checkout`.
    default: ${{ github.repository }}
    required: false

  checkout-ref:
    description: |
      Reference to checkout, i.e. the `ref` input of `actions/checkout`.
    default: ""
    required: false

  python-version:
    description: Python version to use.
    default: '3.x'
    required: false

  package-source:
    description: |
      Source to install the package; options: 'local', 'testpypi', 'pypi'.
    default: local
    required: false

  package-name:
    description: |
      Name of the package to install, when `install_source` is 'testpypi' or 'pypi'.
    default: ""
    required: false

  package-version:
    description: |
      Version of the package to install, when `install_source` is 'testpypi' or 'pypi'.
    default: ""
    required: false

  test-requirements-path:
    description: |
      Path to the test requirements file.
    default: tests/requirements.txt
    required: false

  max-retries:
    description: |
      Maximum number of retries.
    default: 15
    required: false

  retry-delay:
    description: |
      Delay between retries in seconds.
    default: 60
    required: false


runs:
  using: "composite"
  steps:

    - name: 'Initialize'
      shell: bash
      run: |
        # Initialize
        printf "\n\n$(cat ${{github.action_path}}/logo.txt)\n\n\n"
        echo -e "\033[1;30;48;2;0;162;255m 1. Initialize  "

    - if: ${{ inputs.package-source == 'local' }}
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.checkout-ref }}
        fetch-depth: 0
    - if: ${{ inputs.package-source != 'local' }}
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.checkout-ref }}
        sparse-checkout: |
          tests
          requirements.txt
          pyproject.toml
          ${{ inputs.test-requirements-path }}
        sparse-checkout-cone-mode: false

    - name: 'Set up Python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{inputs.python-version}}
        cache: 'pip'
        cache-dependency-path: ${{ inputs.test-requirements-path }}

    - name: 'Install package'
      shell: bash
      run: |
        
        source ${{ github.action_path }}/retry.sh
        
        echo "::group::Update pip"
        python -m pip install --upgrade pip
        echo "::endgroup::"
        
        if [ "${{inputs.package-source}}" = "GitHub" ]; then
            python -m pip install .
        
        elif [ "${{ inputs.package-source }}" = "TestPyPI" ]; then
            python -m pip install -r requirements.txt

            COMMAND = "python -m pip install \
              ${{ inputs.package-name }}==${{ inputs.package-version }} \
              --no-deps \
              --index-url https://test.pypi.org/simple/"
            retry_command "$COMMAND" "${{ inputs.max-retries }}" "${{ inputs.retry-delay }}"
        
        elif [ "${{inputs.package-source}}" = "PyPI" ]; then
            if [ -z "${{ inputs.package-version }}" ]; then
                COMMAND="python -m pip install ${{ inputs.package-name }}"
            else
                COMMAND="python -m pip install ${{ inputs.package-name }}==${{ inputs.package-version }}"
            fi
            retry_command "$COMMAND" "${{ inputs.max-retries }}" "${{ inputs.retry-delay }}"

        else
            echo "Invalid package-source: '${{ inputs.package-source }}'."
            exit 1
        fi
        
        python -m pip install -r ${{ inputs.test-requirements-path }}

    - name: 'Display info'
      shell: bash
      run: |
        echo "::group::Python version"
        python -c "import sys; print(sys.version)"
        echo "::endgroup::"
        echo "::group::pip list"
        python -m pip list
        echo "::endgroup::"
        echo "::group::OS and hardware info"
        uname -a
        echo "::endgroup::"
        echo "::group::Disk space usage"
        df -h
        echo "::endgroup::"
        echo "::group::Available system resources"
        ulimit -a
        echo "::endgroup::"
        echo "::group::Root directory"
        ls -a
        echo "::endgroup::"
        echo "::group::File tree"
        find .
        echo "::endgroup::"
    
    - name: 'Test import package'
      shell: python
      run: |
        import ${{ needs.metadata.outputs.package-name }} as pkg
        print(pkg.__version__)

#    - name: 'Run dependency tests'
#      shell: bash
#      run: pipreqs ./src --debug --print

    - name: 'Run unit tests'
      shell: bash
      run: >-
        pytest -c pyproject.toml
          --cov=${{needs.metadata.outputs.package-name}}
          --cov-report=xml

    - name: 'Upload coverage reports to codecov'
      if: always() && ${{inputs.package-source}} == 'local'
      # https://github.com/marketplace/actions/codecov
      # https://github.com/codecov/codecov-action
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: false
        verbose: true
        env_vars: OS,PYTHON

