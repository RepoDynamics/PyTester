name: 'RepoDynamics PyTester'
description: 'Test Python packages'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue

inputs:
  repository:
    description: Full name of the repository, i.e., 'owner-username/repo-name'.
    required: false
    default: ${{ github.repository }}
  ref:
    description: Git reference to check out in the repository.
    required: false
    default: ${{ github.ref }}
  tests-path:
    description: >-
      Path (relative to the repository root) to the directory containing 
      the test-suite's setup file (e.g., pyproject.toml).
    required: false
    default: tests
  pkg-path:
    description: >-
      Path (relative to the repository root) to the directory containing 
      the package's setup file (e.g., pyproject.toml).
      This is only used when `package-source` is set to 'GitHub'.
    required: false
    default: pkg
  tests-name:
    description: Name of the testsuite package to import.
    required: true
  pkg-src:
    description: Source to install the package; either 'GitHub', 'TestPyPI', or 'PyPI' (case-insensitive).
    required: false
    default: github
  pkg-name:
    description: Name of the package to install, when `pkg-src` is 'PyPI' or 'TestPyPI'.
    required: false
    default: ""
  pkg-version:
    description: |
      Version of the package to download and install, when `pkg-src` is 'PyPI' or 'TestPyPI'.
      If not specified, the latest version will be installed.
    required: false
    default: ""
  python-version:
    description: Python version to use.
    required: false
    default: '3.x'
  pkg-req-path:
    description: |
      Path (relative to the repository root) to the requirements.txt file for the package.
      This is only used when `pkg-src` is 'TestPyPI', in which case the package will
      be installed without its dependencies from TestPyPI, and the dependencies will be
      installed from the requirements.txt file to avoid security vulnerabilities and other issues.
    required: false
    default: pkg/requirements.txt
#  path-report-pytest:
#    description: Path to the pytest reports directory relative to the repository root.
#    required: false
#    default: ""
#  path-report-coverage:
#    description: Path to the coverage reports directory relative to the repository root.
#    required: false
#    default: ""
#  path-cache-pytest:
#    description: Path to the pytest cache directory relative to the repository root.
#    required: false
#    default: ""
#  path-cache-coverage:
#    description: Path to the coverage cache directory relative to the repository root.
#    required: false
#    default: ""
  retry-sleep-seconds-total:
    description: Maximum number of retries for downloading the package from PyPI or TestPyPI.
    required: false
    default: '900'
  retry-sleep-seconds:
    description: Delay between retries in seconds.
    required: false
    default: '30'

runs:
  using: composite
  steps:
    - name: Initialization
      shell: bash
      run: |
        # Initialization
        LOGO_PATH=$(echo "${{github.action_path}}/docs/media/logo/full.txt" | sed -e 's/\\/\//g' -e 's/://')
        printf "\n\n$(cat $LOGO_PATH)\n"
        python "${{ github.action_path }}/action/script/log.py" "1. Initialization"
        python "${{ github.action_path }}/action/script/log.py" "1.1. Repository Checkout"

    
    

    - name: Repository Checkout
      uses: actions/checkout@v4  # https://github.com/actions/checkout
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        fetch-tags: true
        path: repo

    - name: Python Setup
      shell: bash
      run: |
        # Python Setup
        python "${{ github.action_path }}/action/script/log.py" "1.2. Python Setup"
    - uses: actions/setup-python@v5  # https://github.com/actions/setup-python
      with:
        python-version: ${{ inputs.python-version }}

    - name: Environment Setup
      env:
        RD_PYTESTER__REPO_PATH: repo
        RD_PYTESTER__TESTS_PATH: ${{ inputs.tests-path }}
        RD_PYTESTER__PKG_PATH: ${{ inputs.pkg-path }}
        RD_PYTESTER__PKG_SRC: ${{ inputs.pkg-src }}
        RD_PYTESTER__PKG_NAME: ${{ inputs.pkg-name }}
        RD_PYTESTER__PKG_VERSION: ${{ inputs.pkg-version }}
        RD_PYTESTER__PKG_REQ_PATH: ${{ inputs.pkg-req-path }}
        RD_PYTESTER__RETRY_SLEEP_SECONDS: ${{ inputs.retry-sleep-seconds }}
        RD_PYTESTER__RETRY_SLEEP_SECONDS_TOTAL: ${{ inputs.retry-sleep-seconds-total }}
      shell: bash
      run: |
        # Environment Setup
        python "${{ github.action_path }}/action/script/log.py" "1.3. Environment Setup"
        echo "::group::Upgrade Pip"
        python -m pip install --upgrade pip
        echo "::endgroup::"
        echo "::group::Install Action Requirements"
        python -m pip install -r "${{ github.action_path }}/requirements.txt"
        echo "::endgroup::"
        python "${{ github.action_path }}/env_setup.py"

    - name: 'PyTest Cache'
      shell: bash
      run: |
        # PyTest Cache
        python "${{ github.action_path }}/heading.py" 2 "PyTest Cache"
    - uses: actions/cache@v4
      with:
        path: repo/${{ inputs.path-cache-pytest }}
        key: >-
          pytest
          -${{ inputs.os }}
          -${{ inputs.python-version }}
#          -${{ fromJSON(inputs.config).checkout.ref_before }}

    - name: 'Coverage Cache'
      shell: bash
      run: |
        # Coverage Cache
        python "${{ github.action_path }}/heading.py" 2 "Coverage Cache"
    - uses: actions/cache@v4
      with:
        path: repo/${{ inputs.path-cache-coverage }}
        key: >-
          coverage
          -${{ inputs.os }}
          -${{ inputs.python-version }}
#          -${{ fromJSON(inputs.config).checkout.ref_before }}

    - name: 'Test-Suite'
      shell: bash
      env:
        CI: true
      run: |
        # Test-Suite
        python "${{ github.action_path }}/heading.py" 1 "Test-Suite"
        cd repo
        python -m ${{ inputs.tests-name }}
        python "${{ github.action_path }}/heading.py" 1 "Finalization"
        python "${{ github.action_path }}/heading.py" 2 "Report Upload"

    - name: 'Report Upload'
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: Test-Suite Reports
        path: repo/${{ inputs.path-report-pytest }}

    - name: 'Coverage Upload'
      if: ${{ !cancelled() && inputs.pkg-src == 'PyPI' }}
      shell: bash
      run: |
        # Coverage Upload
        python "${{ github.action_path }}/heading.py" 2 "Coverage Upload"
    - if: ${{ !cancelled() && inputs.pkg-src == 'PyPI' }}
      # https://github.com/marketplace/actions/codecov
      # https://github.com/codecov/codecov-action
      env:
        OS: ${{ inputs.os }}
        PYTHON: ${{ inputs.python-version }}
      uses: codecov/codecov-action@v3
      with:
        directory: repo/${{ inputs.path-report-coverage }}
        fail_ci_if_error: false
        verbose: true
        env_vars: OS,PYTHON
